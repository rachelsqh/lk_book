spi分析(待修正）
^^^^^^^^^^^^^^^^^
SPI，是一种高速的，全双工，同步的通信总线，并且在芯片的管脚上只占用四根线，
spi信号时序
"""""""""""
采用主-从模式(Master-Slave) 的控制方式,SPI 规定了两个 SPI 设备之间通信必须由主设备 (Master) 来控制次设备 (Slave)。 一个 Master 设备可以通过提供 Clock 以及对 Slave 设备进行片选 (Slave Select) 来控制多个 Slave 设备，SPI 协议还规定 Slave 设备的 Clock 由 Master 设备通过 SCK 管脚提供给 Slave 设备， Slave 设备本身不能产生或控制 Clock，没有 Clock 则 Slave 设备不能正常工作。
Master 设备会根据将要交换的数据来产生相应的时钟脉冲(Clock Pulse)，时钟脉冲组成了时钟信号(Clock Signal) ，时钟信号通过时钟极性 (CPOL) 和 时钟相位 (CPHA) 控制着两个 SPI 设备间何时数据交换以及何时对接收到的数据进行采样，来保证数据在两个设备之间是同步传输的。即由CPOL和CPHA实现同步。



- 信号：SDI(数据输入)、SDO(数据输出)、SCK(时钟)、CS(片选)
	(1)、SDO/MOSI – master->slave；
	(2)、SDI/MISO – master<-slave；
	(3)、SCK – 时钟信号，由主设备产生；
	(4)、CS/SS – 从设备使能信号，由主设备控制。当有多个从设备的时候，因为每个从设备上都有一个片选引脚接入到主设备机中，当我们的主设备和某个从设备通信时将需要将从设备对应的片选引脚电平拉低或者是拉高。编号从0开始，具体信息由硬件工程师提供；

- SPI总线的极性，会直接影响SPI总线空闲时的时钟信号是高电平还是低电平。
  - CPOL = 1：表示空闲时是高电平；
  - CPOL = 0：表示空闲时是低电平。

由于数据传输往往是从跳变沿开始的，也就表示开始传输数据的时候，是下降沿还是上升沿。如下图：

- SPI总线的相位,一个时钟周期会有2个跳变沿。而相位，直接决定SPI总线从那个跳变沿开始采样数据。
  - CPHA = 0：表示从第一个跳变沿开始采样；
  - CPHA = 1：表示从第二个跳变沿开始采样。	
  spi_cpha.jpg
 
- SPI总线传输的四种模式CPOL 和 CPHA 的不同组合，形成了SPI总线的不同模式。
	- 模式一: CPOL=0，CPHA=0：此时空闲态时，SCLK处于低电平，数据采样是在第1个边沿，也就是
		SCLK由低电平到高电平的跳变，所以数据采样是在上升沿，数据发送是在下降沿。

	- 模式二：CPOL=0，CPHA=1：此时空闲态时，SCLK处于低电平，数据发送是在第1个边沿，也就是
		SCLK由低电平到高电平的跳变，所以数据采样是在下降沿，数据发送是在上升沿。

	- 模式三：CPOL=1，CPHA=0：此时空闲态时，SCLK处于高电平，数据采集是在第1个边沿，也就是
		SCLK由高电平到低电平的跳变，所以数据采集是在下降沿，数据发送是在上升沿。

	- 模式四：CPOL=1，CPHA=1：此时空闲态时，SCLK处于高电平，数据发送是在第1个边沿，也就是
		SCLK由高电平到低电平的跳变，所以数据采集是在上升沿，数据发送是在下降沿。
		
		
需要注意的是：我们的主设备能够控制时钟，因为SPI通信并不像UART或者IIC通信那样有专门的通信周期，有专门的通信起始信号，有专门的通信结束信号；所以SPI协议能够通过控制时钟信号线，当没有数据交流的时候我们的时钟线要么是保持高电平要么是保持低电平。		
		
- 通信过程：

SPI 是许多不同设备使用的通用通信协议。例如，  SD 读卡器模块、  RFID 读卡器模块和 2.4 GHz 无线发射器/接收器 都使用 SPI 与微控制器通信。

SPI 的一个独特优势是可以不间断地传输数据。可以在连续流中发送或接收任意数量的比特。使用 I2C 和 UART，数据以数据包的形式发送，限制为特定位数。开始和停止条件定义了每个数据包的开始和结束，因此数据在传输过程中被中断。

通过 SPI 通信的设备处于主从关系。主机是控制设备（通常是微控制器），而从机（通常是传感器、显示器或存储芯片）从主机接收指令。SPI 最简单的配置是单主单从系统，​​但一个主控可以控制多个从属（下文会详细介绍）。		
		
主从连线：
spi_master_slave.png

- 优点:
	- 没有开始和停止位，因此数据可以连续流式传输而不会中断
	- 没有像 I2C 这样复杂的从机寻址系统
	- 比 I2C 更高的数据传输率（几乎快两倍）
	- MISO 和 MOSI 线分开，可以同时发送和接收数据
- 缺点：
	- 使用四根线（I2C 和 UART 使用两根线）
	- 没有确认数据已经成功接收（I2C有这个）
	- 没有像 UART 中的奇偶校验位那样的错误检查形式
	- 只允许一个主控		
- 链接方式：
	- 菊花链方式：		
		
linux spi驱动方式
""""""""""""""""
spi驱动架构
***********


总结
""""""""
		
		
		
